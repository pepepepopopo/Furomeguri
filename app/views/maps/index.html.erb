<div class="relative h-screen w-screen">
<div class="relative h-screen w-screen">
  <form class="absolute top-4 left-1/2 transform -translate-x-1/2 z-10 w-3/4 px-4">
    <div class="flex space-x-2">
      <div class="relative dropdown-container">
        <button type="button" class="dropdown-button py-2.5 px-4 bg-gray-100 border border-gray-300 rounded-lg text-sm">
          温泉地
        </button>
        <div class="dropdown-menu hidden absolute mt-1 w-44 bg-white rounded-lg shadow z-20">
          <ul class="text-sm text-gray-700">
            <% @default_locations.each do |default_location| %>
              <li><button type="button" class="block w-full text-left px-4 py-2 hover:bg-gray-100">
                <%= default_location.name %></button>
              </li>
            <% end %>
          </ul>
        </div>
      </div>

      <div class="relative dropdown-container">
        <button type="button" class="dropdown-button py-2.5 px-4 bg-gray-100 border border-gray-300 rounded-lg text-sm">
          すべて含む
        </button>
        <div class="dropdown-menu hidden absolute mt-1 w-44 bg-white rounded-lg shadow z-20">
          <ul class="text-sm text-gray-700">
            <li><button type="button" class="block w-full text-left px-4 py-2 hover:bg-gray-100">選択肢A</button></li>
            <li><button type="button" class="block w-full text-left px-4 py-2 hover:bg-gray-100">選択肢B</button></li>
          </ul>
        </div>
      </div>

      <div class="relative dropdown-container">
        <button type="button" class="dropdown-button py-2.5 px-4 bg-gray-100 border border-gray-300 rounded-lg text-sm">
          すべて含む
        </button>
        <div class="dropdown-menu hidden absolute mt-1 w-44 bg-white rounded-lg shadow z-20">
          <ul class="text-sm text-gray-700">
            <li><button type="button" class="block w-full text-left px-4 py-2 hover:bg-gray-100">選択肢X</button></li>
            <li><button type="button" class="block w-full text-left px-4 py-2 hover:bg-gray-100">選択肢Y</button></li>
          </ul>
        </div>
      </div>

      <!-- 検索ボックス -->
      <div class="relative w-full">
        <input type="search" class="block p-2.5 w-full text-sm bg-gray-50 border border-gray-300 rounded-lg" placeholder="検索..." required />
        <button type="submit" class="absolute top-0 end-0 p-2.5 text-white bg-blue-700 rounded-r-lg hover:bg-blue-800">
          🔍
        </button>
      </div>
    </div>
  </form>
</div>


  <div class="absolute inset-0 z-0" id='map'></div>
</div>

<script>
// ドロップダウンメソッド
  document.addEventListener('click', (e) => {
    const isDropdownButton = e.target.closest('.dropdown-button');
    const containers = document.querySelectorAll('.dropdown-container');

    containers.forEach(container => {
      const menu = container.querySelector('.dropdown-menu');
      if (container.contains(e.target) && isDropdownButton) {
        menu.classList.toggle('hidden');
      } else {
        menu.classList.add('hidden');
      }
    });
  });
</script>

<!-- Google Maps API -->
<script
src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAP_API_KEY'] %>&callback=initMap&v=weekly&libraries=marker"
defer></script>
<!-- MarkerClusterer CDN -->
<script src="https://unpkg.com/@googlemaps/markerclusterer/dist/index.min.js"></script>

<script>
let map;
let locations = [];

// API経由でdefault_locationsから温泉地一覧取得
const fetchDefaultLocations = async () => {
  const response = await fetch("/api/default_locations");
  const data = await response.json();
  return data.map(default_location => ({
    name: default_location.name,
    lat: default_location.lat,
    lng: default_location.lng,
  }));
};

async function initMap() {
  // マップの表示設定
  const { Map } = await google.maps.importLibrary("maps");
  const { AdvancedMarkerElement, PinElement } = await google.maps.importLibrary("marker");
  const glyphImg = document.createElement("img");
    map = new Map(document.getElementById("map"), {
    center: {lat: 35.68125718370711, lng:139.7665076889907},
    zoom: 6,
    mapId: 'DEMO_MAP_ID',
  });

// 取得した温泉地一覧の表示
  const locations = await fetchDefaultLocations();
  locations.map(location => {
    const pinCustom = new PinElement({
      glyphColor: 'white',
    });
    const marker = new AdvancedMarkerElement({
      map: map,
      position: {lat: location.lat, lng: location.lng },
      content: pinCustom.element,
    });
  });
};
</script>
